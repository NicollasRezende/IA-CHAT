import subprocess
import threading
import time
import os
import re
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt
from rich.table import Table
from rich.box import ROUNDED
from rich.markdown import Markdown
from rich.theme import Theme

# Tema personalizado
custom_theme = Theme({
    "info": "cyan",
    "success": "green",
    "error": "bold red",
    "warning": "yellow",
    "highlight": "magenta",
    "prompt": "bold yellow",
    "model": "blue",
    "user": "green",
    "header": "bold cyan underline",
    "ai_response": "white",
    "chat_history": "dim white"
})

console = Console(theme=custom_theme, width=100)

def clear_screen():
    """Limpa a tela do terminal"""
    os.system('cls' if os.name == 'nt' else 'clear')

def show_header():
    """Exibe um cabe√ßalho estilizado"""
    clear_screen()
    table = Table(show_header=False, box=ROUNDED, border_style="blue", width=100)
    table.add_column()
    table.add_row("ü§ñ DeepSeek-R1 14B Chat Interface ü§ñ")
    console.print(table)
    console.print("=" * 100, style="blue")
    console.print()

def strip_ansi_codes(text):
    """Remove c√≥digos ANSI de uma string"""
    ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
    return ansi_escape.sub('', text)

def chat_with_deepseek_r1(prompt, show_thinking=True):
    """
    Fun√ß√£o para interagir com o modelo deepseek-r1:14b via Ollama
    com visualiza√ß√£o aprimorada usando Rich
    
    Args:
        prompt (str): Mensagem a ser enviada para o modelo
        show_thinking (bool): Se deve mostrar anima√ß√£o de "pensando"
        
    Returns:
        str: Resposta do modelo
    """
    # Preparar o prompt para for√ßar respostas em portugu√™s
    prefixo_portugues = """Voc√™ √© um assistente de IA √∫til e deve responder sempre em portugu√™s brasileiro, 
independentemente do idioma usado na pergunta. Use uma linguagem natural e fluente.

Pergunta do usu√°rio: """
    
    prompt_completo = prefixo_portugues + prompt
    
    # Comando espec√≠fico
    cmd = ["ollama", "run", "deepseek-r1:14b"]
    
    # Log estilizado
    console.print(Panel(
        "[model]Iniciando comunica√ß√£o com DeepSeek-R1 (14B)[/model]",
        title="[header]STATUS[/header]",
        border_style="blue",
        box=ROUNDED
    ))
    
    # Criar uma tabela para o envio de prompt (mostrando apenas a pergunta original, n√£o o prefixo)
    prompt_table = Table(box=ROUNDED, border_style="green", width=100)
    prompt_table.add_column("Prompt enviado:", style="bold green")
    prompt_table.add_row(prompt)
    console.print(prompt_table)
    
    # Preparar o processo
    process = subprocess.Popen(
        cmd,
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True,
        bufsize=1
    )
    
    # Vari√°vel para armazenar a resposta e controlar a thread
    result = {"stdout": "", "stderr": "", "complete": False}
    progress_event = threading.Event()
    
    # Thread para mostrar indica√ß√£o de progresso
    def show_progress_indicator():
        if not show_thinking:
            return
            
        # Usa um m√©todo mais simples que n√£o conflita
        thinking_phrases = [
            "Processando informa√ß√µes",
            "Analisando contexto",
            "Gerando resposta",
            "Aplicando conhecimentos",
            "Elaborando conte√∫do"
        ]
        spinner_chars = "‚†ã‚†ô‚†π‚†∏‚†º‚†¥‚†¶‚†ß‚†á‚†è"
        
        start_time = time.time()
        progress_line = ""
        
        try:
            while not result["complete"] and not progress_event.is_set():
                elapsed = time.time() - start_time
                minutes, seconds = divmod(int(elapsed), 60)
                
                # Seleciona uma frase baseada no tempo decorrido
                phrase_index = int(elapsed / 5) % len(thinking_phrases)
                phrase = thinking_phrases[phrase_index]
                
                # Atualiza o spinner
                spinner_char = spinner_chars[int(elapsed * 10) % len(spinner_chars)]
                
                # Limpa a linha anterior e exibe novo status
                if progress_line:
                    # Calcula o n√∫mero de caracteres para limpar (largura + alguns extras)
                    clear_len = len(progress_line) + 5
                    print("\r" + " " * clear_len, end="\r")
                
                # Novo texto de progresso
                progress_line = f"{spinner_char} {phrase}... ({minutes:02d}:{seconds:02d})"
                print("\r" + progress_line, end="", flush=True)
                
                # Pausa curta
                time.sleep(0.1)
        finally:
            # Garante que limpamos a linha no final
            if progress_line:
                print("\r" + " " * (len(progress_line) + 5), end="\r", flush=True)
    
    # Iniciar thread de progresso
    progress_thread = threading.Thread(target=show_progress_indicator)
    progress_thread.daemon = True
    progress_thread.start()
    
    try:
        # Enviar o prompt completo (com o prefixo de portugu√™s) e receber a resposta
        stdout, stderr = process.communicate(input=prompt_completo)
        result["stdout"] = stdout
        
        # Limpar c√≥digos ANSI do stderr antes de armazenar
        if stderr:
            result["stderr"] = strip_ansi_codes(stderr)
        
    except Exception as e:
        result["stderr"] = str(e)
    finally:
        # Marcar como completo para parar a anima√ß√£o
        result["complete"] = True
        progress_event.set()
        
        # Garantir que a thread termine
        if progress_thread.is_alive():
            progress_thread.join(timeout=1.0)
        
        # Limpar qualquer res√≠duo da linha de progresso
        print("\r" + " " * 100, end="\r", flush=True)
    
    # Verificar erros (apenas exibir se houver conte√∫do √∫til)
    if result["stderr"] and len(result["stderr"].strip()) > 0:
        # Remover caracteres de controle mais uma vez para garantir
        cleaned_error = strip_ansi_codes(result["stderr"]).strip()
        
        # Verificar se ainda h√° conte√∫do √∫til
        if cleaned_error and not cleaned_error.isspace() and not "spinner" in cleaned_error.lower():
            console.print(Panel(
                f"[error]{cleaned_error}[/error]",
                title="[header]ERRO[/header]",
                border_style="red",
                box=ROUNDED
            ))
    else:
        # Log de conclus√£o
        console.print("[success]‚úì Resposta recebida![/success]")
    
    return result["stdout"].strip()

def format_response(text):
    """Formata a resposta para exibi√ß√£o mais bonita"""
    # Remover poss√≠veis tags <think></think> que o modelo √†s vezes adiciona
    text = re.sub(r'<think>.*?</think>', '', text, flags=re.DOTALL).strip()
    
    # Detectar se a resposta cont√©m markdown
    if '```' in text or '#' in text or '*' in text:
        return Markdown(text)
    else:
        return text

def get_user_input():
    """Obt√©m entrada do usu√°rio com estilo"""
    return Prompt.ask("[prompt]Sua pergunta[/prompt]")

def continuous_chat():
    """Inicia um chat cont√≠nuo com o DeepSeek-R1"""
    show_header()
    
    console.print(Panel(
        "[info]Modo de Chat Cont√≠nuo[/info]\n"
        "Digite suas perguntas e converse continuamente com o modelo.\n"
        "Para sair a qualquer momento, digite [bold]'sair'[/bold] ou [bold]'exit'[/bold].",
        title="[header]INSTRU√á√ïES[/header]",
        border_style="cyan",
        box=ROUNDED
    ))
    
    # Hist√≥rico de chat
    chat_history = []
    
    while True:
        # Obter a pergunta do usu√°rio
        console.print()
        pergunta = get_user_input()
        
        # Verificar se o usu√°rio quer sair
        if pergunta.lower() in ['sair', 'exit', 'quit']:
            console.print("[warning]Saindo do chat cont√≠nuo...[/warning]")
            break
        
        console.print()
        
        # Adicionar ao hist√≥rico
        chat_history.append(("user", pergunta))
        
        # Obter resposta
        resposta = chat_with_deepseek_r1(pergunta)
        
        # Adicionar ao hist√≥rico
        chat_history.append(("ai", resposta))
        
        # Exibir a resposta em um painel estilizado
        console.print(Panel(
            format_response(resposta),
            title="[header]Resposta do DeepSeek-R1[/header]",
            border_style="cyan",
            box=ROUNDED,
            expand=False,
            width=100
        ))
        
        # Mostrar op√ß√µes
        console.print("\n[info]Digite sua pr√≥xima pergunta ou 'sair' para voltar ao menu principal[/info]")
        
    # Retornar ao menu principal
    return

def chat_with_context():
    """Chat com contexto personalizado"""
    show_header()
    
    nome_usuario = Prompt.ask("[prompt]Seu nome[/prompt]")
    idade = Prompt.ask("[prompt]Sua idade[/prompt]")
    pergunta = get_user_input()
    
    prompt_personalizado = f"""
    Informa√ß√µes do usu√°rio:
    - Nome: {nome_usuario}
    - Idade: {idade}

    Pergunta: {pergunta}
    """
    
    console.print()
    resposta = chat_with_deepseek_r1(prompt_personalizado)
    
    # Exibindo a resposta em um painel estilizado
    console.print(Panel(
        format_response(resposta),
        title="[header]Resposta Personalizada[/header]",
        border_style="cyan",
        box=ROUNDED,
        expand=False,
        width=100
    ))

def predefined_questions():
    """Chat com perguntas pr√©-definidas"""
    show_header()
    
    table = Table(box=ROUNDED, border_style="green", width=100)
    table.add_column("ID", style="bold cyan", width=5)
    table.add_column("Perguntas pr√©-definidas", style="green")
    
    perguntas = [
        "Explique o que √© intelig√™ncia artificial em termos simples.",
        "Quais s√£o os melhores frameworks de machine learning em 2025?",
        "Como a IA est√° transformando a √°rea da sa√∫de?",
        "Quais s√£o as considera√ß√µes √©ticas no desenvolvimento de IA?",
        "Qual √© a diferen√ßa entre machine learning e deep learning?"
    ]
    
    for i, pergunta in enumerate(perguntas, 1):
        table.add_row(str(i), pergunta)
        
    console.print(table)
    
    choice = Prompt.ask(
        "[prompt]Selecione uma pergunta[/prompt]", 
        choices=[str(i) for i in range(1, len(perguntas)+1)]
    )
    
    pergunta_selecionada = perguntas[int(choice)-1]
    console.print(f"[user]Pergunta selecionada:[/user] {pergunta_selecionada}")
    console.print()
    
    resposta = chat_with_deepseek_r1(pergunta_selecionada)
    
    # Exibindo a resposta em um painel estilizado
    console.print(Panel(
        format_response(resposta),
        title="[header]Resposta do DeepSeek-R1[/header]",
        border_style="cyan",
        box=ROUNDED,
        expand=False,
        width=100
    ))

def main():
    """Fun√ß√£o principal com menu"""
    show_header()
    
    # Menu inicial
    table = Table(box=ROUNDED, border_style="yellow", width=100)
    table.add_column("Op√ß√µes de Chat", style="bold yellow")
    table.add_row("1. Chat cont√≠nuo")
    table.add_row("2. Chat com contexto personalizado")
    table.add_row("3. Perguntas pr√©-definidas")
    table.add_row("4. Sair")
    
    console.print(table)
    
    choice = Prompt.ask("[prompt]Selecione uma op√ß√£o[/prompt]", choices=["1", "2", "3", "4"])
    
    if choice == "1":
        # Chat cont√≠nuo
        continuous_chat()
    elif choice == "2":
        # Chat com contexto personalizado
        chat_with_context()
    elif choice == "3":
        # Perguntas pr√©-definidas
        predefined_questions()
    else:
        # Sair
        console.print("[warning]Saindo do programa![/warning]")
        return
    
    # Verificar se deseja voltar ao menu principal
    if choice != "1":  # Para o chat cont√≠nuo, j√° voltamos ao menu automaticamente
        continuar = Prompt.ask(
            "\n[prompt]Voltar ao menu principal?[/prompt]", 
            choices=["s", "n"], 
            default="s"
        )
        
        if continuar.lower() == "s":
            main()  # Reiniciar o menu

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        console.print("\n[warning]Programa interrompido pelo usu√°rio![/warning]")
    except Exception as e:
        console.print(f"[error]Erro inesperado: {str(e)}[/error]")
    finally:
        console.print("\n[info]Obrigado por usar a interface DeepSeek-R1![/info]")